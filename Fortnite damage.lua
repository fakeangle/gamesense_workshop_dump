slot0 = require("gamesense/easing")
slot2 = {
	[slot9 - 1] = renderer.load_png(function (slot0)
		return string.gsub(slot0, "[^" .. "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" .. "=]", ""):gsub(".", function (slot0)
			if slot0 == "=" then
				return ""
			end

			slot2 = uv0:find(slot0) - 1

			for slot6 = 6, 1, -1 do
				slot1 = "" .. (slot2 % 2^slot6 - slot2 % 2^(slot6 - 1) > 0 and "1" or "0")
			end

			return slot1
		end):gsub("%d%d%d?%d?%d?%d?%d?%d?", function (slot0)
			if #slot0 ~= 8 then
				return ""
			end

			for slot5 = 1, 8 do
				slot1 = 0 + (slot0:sub(slot5, slot5) == "1" and 2^(8 - slot5) or 0)
			end

			return string.char(slot1)
		end)
	end(slot1[slot9]), 59, 105)
}

for slot9 = 1, #{
	"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"
} do
end

slot5 = {
	enabled = ui.new_checkbox("VISUALS", "Effects", "Fortnite damage"),
	body_color = ui.new_color_picker("VISUALS", "Effects", "Fortnite damage body", 255, 255, 255, 255),
	head_label = ui.new_label("VISUALS", "Effects", "Headshot color"),
	head_color = ui.new_color_picker("VISUALS", "Effects", "Fortnite damage headshot", 255, 255, 0, 255),
	mode = ui.new_multiselect("VISUALS", "Effects", "Fortnite damage mode", "Player", "Teammates", "Enemies"),
	scale = ui.new_slider("VISUALS", "Effects", "Fortnite damage scale", 25, 200, 100, true, "%"),
	timeout = ui.new_slider("VISUALS", "Effects", "Fortnite damage time", 10, 100, 50, true, "s", 0.1)
}
slot6, slot7, slot8, slot9 = ui.get(slot5.head_color)
slot10, slot11, slot12, slot13 = ui.get(slot5.body_color)
slot14 = ui.get(slot5.timeout) * 0.1
slot15 = ui.get(slot5.scale) * 0.005
slot16 = {}
slot17 = {
	Player = function (slot0)
		return entity.get_local_player() == slot0
	end,
	Teammates = function (slot0)
		return not entity.is_enemy(slot0)
	end,
	Enemies = function (slot0)
		return entity.is_enemy(slot0)
	end
}

function slot18(slot0, slot1, slot2)
	for slot6, slot7 in pairs(slot0) do
		if slot7 ~= slot2 then
			ui.set_visible(slot7, slot1)
		end
	end
end

function slot19(slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7)
	renderer.texture(uv0[slot0], slot1 - slot3 * uv1 / 2, slot2 - slot3 * uv2 / 2, uv1 * slot3, uv2 * slot3, slot4, slot5, slot6, slot7, "f")
end

function slot20(slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8)
	slot9 = uv0.quart_in(slot6 / uv1, 0, 1, 1)

	for slot16 = 1, string.len(string.format("%d", slot8)) do
		uv2(tonumber(string.sub(slot12, slot16, slot16)), slot0 + slot16 * uv3 * slot7, slot1 - slot9 * 256, slot7 * (uv0.elastic_out(slot6, 0, 1, 1 + slot16 * 0.25) - slot9), slot2, slot3, slot4, slot5 * (1 - slot9))
	end
end

function slot21(slot0)
	for slot5, slot6 in ipairs(ui.get(uv0.mode)) do
		if uv1[slot6](client.userid_to_entindex(slot0.attacker)) then
			slot8, slot9, slot10 = entity.hitbox_position(client.userid_to_entindex(slot0.userid), 0)

			if slot8 ~= nil then
				if uv2[slot7] then
					uv2[slot7] = {
						uv2[slot7][1] + slot0.dmg_health,
						globals.realtime(),
						slot8,
						slot9,
						slot10,
						slot0.hitgroup == 1
					}
				else
					uv2[slot7] = {
						slot0.dmg_health,
						globals.realtime(),
						slot8,
						slot9,
						slot10,
						slot0.hitgroup == 1
					}
				end
			end

			return
		end
	end
end

function slot22()
	slot0 = globals.realtime()

	for slot4, slot5 in pairs(uv0) do
		if slot5 then
			slot6, slot7 = renderer.world_to_screen(slot5[3], slot5[4], slot5[5])

			if slot6 ~= nil then
				slot8 = uv1
				slot9 = uv2
				slot10 = uv3
				slot11 = uv4

				if slot5[6] then
					slot11 = uv8
					slot10 = uv7
					slot9 = uv6
					slot8 = uv5
				end

				if uv9 <= slot0 - slot5[2] then
					uv0[slot4] = nil
				else
					uv10(slot6, slot7, slot8, slot9, slot10, slot11, slot0 - slot5[2], uv11, slot5[1])
				end
			end
		end
	end
end

function slot23()
	slot1 = ui.get(uv0.enabled) and client.set_event_callback or client.unset_event_callback

	slot1("player_hurt", uv1)
	slot1("paint", uv2)
	uv3(uv0, slot0, uv0.enabled)

	uv4 = {}
end

ui.set_callback(slot5.enabled, slot23)
slot23()
ui.set_callback(slot5.head_color, function ()
	uv0, uv1, uv2, uv3 = ui.get(uv4.head_color)
end)
ui.set_callback(slot5.body_color, function ()
	uv0, uv1, uv2, uv3 = ui.get(uv4.body_color)
end)
ui.set_callback(slot5.timeout, function ()
	uv0 = ui.get(uv1.timeout) * 0.1
end)
ui.set_callback(slot5.scale, function ()
	uv0 = ui.get(uv1.scale) * 0.005
end)
